/// <summary>
/// Module to save current values to a file in each DCM iteration (each 10 ms)
/// </summary>

#include "publisher.h"
#include <boost/shared_ptr.hpp>
#include <alcommon/alproxy.h>
#include <alcommon/albroker.h>
#include <alcommon/almodule.h>

#include <alerror/alerror.h>

// Used to read values of ALMemory directly in RAM
#include <alvision/alvisiondefinitions.h>
#include <alvision/alimage.h>

#include <boost/bind.hpp>
#include <boost/thread.hpp>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/image_encodings.h>
#include <nodelet/loader.h>

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

using namespace std;

using namespace AL;

#define FRAMERATE 5

/// <summary>
/// Module to save current values to a file in each DCM iteration (each 10 ms)
/// </summary>
/// <param name="broker"> A smart pointer to the broker.</param>
/// <param name="name">   The name of the module. </param>
Publisher::Publisher(boost::shared_ptr<AL::ALBroker> broker,
                                         const std::string &name)
    : AL::ALModule(broker, name)
{
    setModuleDescription( "Publish images as a ros topic" );
}

Publisher::~Publisher()
{
    visionProxy->unsubscribe(name);
}

void Publisher::init()
{
    // Init nao node
    int argc = 0;
    char** argv = NULL;
    ros::init(argc, argv, "nao_publisher");
    ros::NodeHandle n;
    image_transport::ImageTransport it(n);
    camera_pub = it.advertiseCamera("image_raw", 1);

    // Subscribe to the camera
    try {
        visionProxy = boost::shared_ptr<ALVideoDeviceProxy>
           (new ALVideoDeviceProxy());
        int cam_index = 0;
        name = visionProxy->subscribeCamera("ros_local_cam", cam_index, kQVGA, kYuvColorSpace, FRAMERATE);
    } catch (const ALError& e) {
        std::cerr << "Could not create proxy: " << e.what() << std::endl; 
    }

    // Create camera info manager

    cinfo_ = boost::shared_ptr<camera_info_manager::CameraInfoManager>(
                new camera_info_manager::CameraInfoManager(n));
    std::string curl;
    n.getParam("camera_info_url", curl);
    cinfo_->loadCameraInfo(curl);

    // Create a publishing thread
    boost::thread publisherThread(boost::bind( &Publisher::publishImages, this ));
    // Create the nodelet manager
    boost::thread manangerThread(boost::bind( &Publisher::nodeletManager, this ));
}

void Publisher::nodeletManager(){
    nodelet::Loader l;
    ros::spin();
}

void Publisher::publishImages(){
    ros::Rate loop_rate(FRAMERATE);
    while(ros::ok()){
        publishImage();
        //ros::spinOnce();
        loop_rate.sleep();
    }
}

void Publisher::publishInfo(){

}

void Publisher::publishImage(){
    const ALImage* image = (const ALImage*) visionProxy->getImageLocal(name);
    sensor_msgs::ImagePtr msg(new sensor_msgs::Image);
    msg->header.stamp = ros::Time::now();
    // Two u_int8_t per pixe (4 per 2 pixels)
    msg->step = image->getWidth();
    msg->height = image->getHeight();
    msg->width = image->getWidth();
    msg->encoding = sensor_msgs::image_encodings::MONO8;// TODO:change arpose to use this

    int image_size = msg->step*image->getHeight();
    const u_int8_t * imgData = (u_int8_t*)image->getData();
    //vector<u_int8_t> imVect(imgData, imgData + image_size * sizeof (char));
    msg->data.assign(imgData, imgData + image_size);
//    memcpy(&(msg.data)[0],
//    image->getData(),
//    640*480);

    sensor_msgs::CameraInfoPtr
        ci(new sensor_msgs::CameraInfo(cinfo_->getCameraInfo()));
    camera_pub.publish(msg, ci);
    visionProxy->releaseImage(name);
}


